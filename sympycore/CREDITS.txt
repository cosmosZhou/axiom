Introduction
------------

This file collects the notes for credits, acknowledgments, and used
third-party software of the SympyCore project in chronological
reversed order. 

[OBSOLETE] means that the most recent version of sympycore does not
use the particular part of the contribution anymore. Nevertheless, the
contribution had importance in the development of sympycore to its
current stage.

Credits and History
-------------------

* In February 2008, the following features were introduced: SympyCore
  User's Guide, PolynomialRing, MatrixRing, SympyCore benchmarks
  suite, generating super-efficient code for
  CommutativeRingWithPairs and numbers methods.

* In January 2008, a new algebra package was introduced that increased
  the performance of the directadd5 test case four-fold. The basic
  design of the algebra package was developed by Pearu Peterson and
  Fredrik Johansson.  Pearu implemented CommutativeRingWithPairs that
  is the computational base class to many algebras. Fredrik
  implemented an efficient numbers support (mpq, mpf, mpc,
  extended_number) that is one of the main factors for recent
  performance improvements. Fredrik implemented PrimitiveAlgebra class
  that is used as a universal language between different
  algebras. Pearu added an expression parsing (based on the Python
  compiler package) support to PrimitiveAlgebra. Fredrik became an
  author of sympycore package.

* [OBSOLETE] SympyCore uses the idea of Fredrik Johansson's research
  to carry out arithmetic operations using s-expression like
  structures intended to minimize the amount of work performed outside
  of Python builtin functions. See

    http://sympycore.googlecode.com/svn/trunk/research/directadd5.py

  for details. The idea with added features is implemented in
  sympycore by Pearu in late December 2007. This resulted a
  considerable performance improvement in terms of creating new
  symbolic expressions and performing arithmetic operations.

* [OBSOLETE] SympyCore uses the proof-of-concept by Kirill Smelkov

    http://code.google.com/p/sympy/issues/detail?id=440

  (see comment #10) for using Python AST structures to parse strings
  and create symbolic expressions from them. The idea with added
  features was implemented in sympycore by Pearu. 

* [OBSOLETE] The code of SympyCore is based on the development of the
  sympy-sandbox branch of the SymPy project SVN repository. The branch
  as well as subsequent development of the sympycore package is
  carried out solely by Pearu Peterson during the year 2007.

  The development of the sympy-sandbox branch was based on speed
  improvements discussed in

    http://code.google.com/p/sympy/issues/detail?id=362

  which included the suggestion by Fredrik to use dicts instead of
  tuples to hold sums, to make flattening of sums faster.

* The SympyCore project, started by Pearu Peterson, is closely related
  to the SymPy project: http://sympy.googlecode.com/.
  See http://wiki.sympy.org/wiki/Contributors/ for SymPy credits.


Third-party software
--------------------

SympyCore includes the following third-party software:

* mpmath package (SVN revisions 189, 325, 332) developed by Fredrik Johansson:

    http://mpmath.googlecode.com/

  The package is used as a backend for arbitrary precision floating
  point number support and is included in sympycore package tree.

* [OBSOLETE] qm module (v0.1) developed by Robert Dick:

    http://ziyang.ece.northwestern.edu/~dickrp/python/mods.html

  The module implements Quine-McCluskey two-level logic minimization
  method that is used to evaluate boolean expressions.

Acknowledgments
---------------

* The work of Pearu Peterson on the Sympy and SympyCore projects is
  supported by a Center of Excellence grant from the Norwegian
  Research Council to Center for Biomedical Computing at Simula
  Research Laboratory.
